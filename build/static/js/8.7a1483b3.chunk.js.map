{"version":3,"sources":["utils/hooks.js","modules/admin/dashboard/DashboardCalls.js","modules/admin/dashboard/DashboardGoods.js","modules/admin/dashboard/DashboardUsers.js","api/dashboardApi.js","modules/admin/dashboard/dashboardSlice.js","modules/admin/dashboard/Dashboard.js","modules/admin/dashboard/dashboardHooks.js"],"names":["useAPI","options","dispatch","useDispatch","payload","a","init","api","response","success","useQuery","search","useLocation","qs","parse","callColors","callActiveColors","DashboardCalls","props","className","labelComponent","data","calls","height","width","padding","style","fill","datum","x","events","target","eventHandlers","onMouseOver","mutation","active","onMouseOut","DashboardCallsLabel","this","orientation","pointerLength","cornerRadius","flyoutWidth","flyoutHeight","y","fontSize","flyoutStyle","stroke","text","React","Component","defaultEvents","VictoryTooltip","goodsColors","DashboardGoods","domainPadding","goods","DashboardUsers","colorScale","users","map","user","index","key","name","symbol","title","getDashboardApi","http","url","createSlice","initialState","reducers","getDashboard","state","action","item","type","count","forEach","push","year","admin","manager","operator","reducer","dashboardActions","actions","Dashboard","registerReducer","useAsync","loading","error","useSelector","dashboard","useDashboard","Loader"],"mappings":"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","file":"static/js/8.7a1483b3.chunk.js","sourcesContent":["import {useLocation} from \"react-router\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport qs from \"query-string\";\r\n\r\nexport function useAPI(options) {\r\n  let dispatch = useDispatch();\r\n  \r\n  return async function (payload) {\r\n    if (options.init) dispatch(options.init(payload));\r\n    \r\n    const response = await options.api(payload)\r\n    \r\n    if (options.success) dispatch(options.success(response));\r\n    \r\n    return response;\r\n  }\r\n}\r\n\r\nexport function useQuery(options) {\r\n  let {search} = useLocation();\r\n  \r\n  return qs.parse(search, options);\r\n}\r\n","import React from 'react';\r\n\r\nimport {\r\n  VictoryPie,\r\n  VictoryTooltip,\r\n} from \"victory\";\r\n\r\nconst callColors = {\r\n  \"incoming\": \"#66FF33\",\r\n  \"outgoing\": \"#99CCCC\",\r\n  \"missing\": \"#CC3333\",\r\n}\r\n\r\nconst callActiveColors = {\r\n  \"incoming\": \"#66FF00\",\r\n  \"outgoing\": \"#33CCCC\",\r\n  \"missing\": \"#CC0033\",\r\n}\r\n\r\nexport function DashboardCalls(props) {\r\n  return (\r\n    <div className=\"dashboard-calls\">\r\n      <h2 className=\"title\">Calls</h2>\r\n      <VictoryPie\r\n        labelComponent={<DashboardCallsLabel/>}\r\n        data={props.calls}\r\n        height={300}\r\n        width={300}\r\n        padding={0}\r\n        style={{\r\n          data: {\r\n            fill: ({datum}) => callColors[datum.x],\r\n          }\r\n        }}\r\n        events={[{\r\n          target: \"data\",\r\n          eventHandlers: {\r\n            onMouseOver: () => {\r\n              return [\r\n                {\r\n                  target: \"data\",\r\n                  mutation: ({datum}) => ({style: {fill: callActiveColors[datum.x]}})\r\n                }, {\r\n                  target: \"labels\",\r\n                  mutation: () => ({active: true})\r\n                }\r\n              ];\r\n            },\r\n            onMouseOut: () => {\r\n              return [\r\n                {\r\n                  target: \"data\",\r\n                  mutation: ({datum}) => ({style: {fill: callColors[datum.x]}})\r\n                }, {\r\n                  target: \"labels\",\r\n                  mutation: () => ({active: false})\r\n                }\r\n              ];\r\n            }\r\n          }\r\n        }]}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nclass DashboardCallsLabel extends React.Component {\r\n  render() {\r\n    return (\r\n      <g>\r\n        <VictoryTooltip\r\n          {...this.props}\r\n          orientation=\"top\"\r\n          pointerLength={0}\r\n          cornerRadius={75}\r\n          flyoutWidth={150}\r\n          flyoutHeight={150}\r\n          x={150}\r\n          y={225}\r\n          style={{fontSize: '25px', fill: \"#00415a\"}}\r\n          flyoutStyle={{\r\n            fill: \"#f0f2f5\",\r\n            stroke: \"#f0f2f5\"\r\n          }}\r\n          text={({datum}) => [datum.y, datum.x]}\r\n        />\r\n      </g>\r\n    );\r\n  }\r\n}\r\n\r\nDashboardCallsLabel.defaultEvents = VictoryTooltip.defaultEvents;","import React from 'react';\r\n\r\nimport {\r\n  VictoryBar,\r\n  VictoryChart,\r\n} from \"victory\";\r\n\r\nconst goodsColors = {\r\n  \"tv\": \"#FFCC00\",\r\n  \"laptop\": \"#66FF33\",\r\n  \"microwave\": \"#CC3333\",\r\n  \"fridge\": \"#99CCCC\",\r\n}\r\n\r\nexport function DashboardGoods(props) {\r\n  return (\r\n    <div className=\"dashboard-goods\">\r\n      <h2 className=\"title\">Goods</h2>\r\n      <VictoryChart\r\n        domainPadding={15}\r\n      >\r\n        <VictoryBar\r\n          data={props.goods}\r\n          style={{\r\n            data: {\r\n              fill: ({datum}) => goodsColors[datum.x],\r\n            }\r\n          }}\r\n        />\r\n      </VictoryChart>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport {\r\n  VictoryChart,\r\n  VictoryStack,\r\n  VictoryArea,\r\n  VictoryLegend,\r\n} from \"victory\";\r\n\r\nexport function DashboardUsers(props) {\r\n  return (\r\n    <div className=\"dashboard-users\">\r\n      <h2 className=\"title\">Users</h2>\r\n      <div className=\"dashboard-users-wrapper\">\r\n        <div className=\"chart\">\r\n          <VictoryChart\r\n            width={300}\r\n            height={300}\r\n          >\r\n            <VictoryStack\r\n              colorScale={[\r\n                \"#CC3333\",\r\n                \"#66FF33\",\r\n                \"#FFCC00\",\r\n              ]}\r\n            >\r\n              {props.users.map((user, index) => (\r\n                <VictoryArea\r\n                  data={user}\r\n                  key={index}\r\n                />\r\n              ))}\r\n            </VictoryStack>\r\n          </VictoryChart>\r\n        </div>\r\n        <div className=\"legend\">\r\n          <VictoryLegend\r\n            orientation=\"vertical\"\r\n            data={[\r\n              {name: \"Operator\", symbol: { fill: \"#FFCC00\" }},\r\n              {name: \"Manager\", symbol: { fill: \"#66FF33\" }},\r\n              {name: \"Admin\", symbol: { fill: \"#CC3333\" }},\r\n            ]}\r\n            width={100}\r\n            height={300}\r\n            y={50}\r\n            style={{title: {fontSize: 20}}}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import {http} from \"../utils/httpClient\";\r\n\r\nexport function getDashboardApi() {\r\n  return http({\r\n    url: \"/dashboard\"\r\n  });\r\n}\r\n","import {createSlice} from \"@reduxjs/toolkit\";\r\n\r\nexport const name = \"dashboard\";\r\n\r\nexport const initialState = {\r\n  calls: [],\r\n  goods: [],\r\n  users: [],\r\n};\r\n\r\nconst reducers = {\r\n  getDashboard(state, action) {\r\n    state.calls = action.payload.calls.map(item => ({x: item.type, y: item.count}));\r\n    state.goods = action.payload.goods.map(item => ({x: item.type, y: item.count}));\r\n    \r\n    const users = {};\r\n    action.payload.users.forEach(user => {\r\n      if (!users[user.type]) users[user.type] = [];\r\n  \r\n      users[user.type].push({x: user.year, y: user.count})\r\n    });\r\n    state.users = [\r\n      users.admin,\r\n      users.manager,\r\n      users.operator,\r\n    ];\r\n  }\r\n};\r\n\r\nexport const {reducer, actions: dashboardActions} = createSlice({\r\n  initialState,\r\n  reducers,\r\n  name\r\n});\r\n","import \"./dashboard.less\";\r\n\r\nimport React from 'react';\r\n\r\nimport {Loader} from \"../../../widgets/loader/Loader\";\r\n\r\nimport {DashboardCalls} from \"./DashboardCalls\";\r\nimport {DashboardGoods} from \"./DashboardGoods\";\r\nimport {DashboardUsers} from \"./DashboardUsers\";\r\n\r\nimport {useDashboard} from \"./dashboardHooks\";\r\nimport {registerReducer} from \"../../../core/store\";\r\nimport {reducer, name} from './dashboardSlice';\r\n\r\nexport default function Dashboard() {\r\n  registerReducer(name, reducer);\r\n  \r\n  const {calls, goods, users, loading} = useDashboard();\r\n  \r\n  if (loading) return <Loader/>;\r\n  \r\n  return (\r\n    <div className=\"dashboard-page\">\r\n      <DashboardCalls calls={calls}/>\r\n      <DashboardGoods goods={goods}/>\r\n      <DashboardUsers users={users}/>\r\n    </div>\r\n  );\r\n}\r\n","import {useAsync} from \"react-async-hook\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\nimport {useAPI} from \"../../../utils/hooks\";\r\n\r\nimport {getDashboardApi} from \"../../../api/dashboardApi\";\r\n\r\nimport {dashboardActions} from \"./dashboardSlice\";\r\n\r\nexport function useDashboard() {\r\n  const getDashboard = useAPI({\r\n    api: getDashboardApi,\r\n    success: dashboardActions.getDashboard,\r\n  });\r\n\r\n  const {loading, error} = useAsync(getDashboard, []);\r\n\r\n  const {calls, goods, users} = useSelector(state => state.dashboard);\r\n\r\n  return {calls, goods, users, loading, error};\r\n}\r\n"],"sourceRoot":""}